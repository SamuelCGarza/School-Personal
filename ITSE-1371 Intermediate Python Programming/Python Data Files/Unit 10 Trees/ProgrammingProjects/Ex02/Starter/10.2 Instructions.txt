In the LinkedBST class of the linkedbst.py file, complete the following:

Be sure to reuse your solution from Programming Exercise 10.1 as your starter file for the linkedbst.py file.

Define the height() method.
The height() method returns the height of the tree, as defined in this chapter.
Define the isBalanced() method.
The isBalanced() method returns True if the height of the tree is less than twice the log2 of its number of nodes, or False otherwise.
To test your program run the main() method in the testbst.py file.

Your program's output should look like the following:

Output may vary because the last list is generated randomly

Adding D B A C F E G

Expect True for A in tree:  True

String:
| | G
| F
| | E
D
| | C
| B
| | A


Height = 2

Is balanced = True

Clone:
| | G
| F
| | E
D
| | C
| B
| | A

Expect True for tree == clone:  True

For loop: D B A C F E G 

inorder traversal: A B C D E F G 

preorder traversal: D B A C F E G 

postorder traversal: A C B E G F D 

levelorder traversal: D B F A C E G 

Removing all items: A B C D E F G 

Expect length of 0:  0

Added 1..15:
| | | | | | | | | | | | | | 15
| | | | | | | | | | | | | 14
| | | | | | | | | | | | 13
| | | | | | | | | | | 12
| | | | | | | | | | 11
| | | | | | | | | 10
| | | | | | | | 9
| | | | | | | 8
| | | | | | 7
| | | | | 6
| | | | 5
| | | 4
| | 3
| 2
1


Height = 14

Is balanced = False

Added  [12, 5, 11, 15, 13, 14, 10, 7, 3, 8, 4, 9, 1, 2, 6] 
| 15
| | | 14
| | 13
12
| | 11
| | | 10
| | | | | | 9
| | | | | 8
| | | | 7
| | | | | 6
| 5
| | | 4
| | 3
| | | | 2
| | | 1


Height = 6

Is balanced = True